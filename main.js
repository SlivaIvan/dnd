(()=>{"use strict";var e,t,r={325:(e,t,r)=>{r(588);const n=new class{constructor(){this.container=document.querySelector(".container"),this.items=null,this.storageOb={todo:[],inprogress:[],done:[]}}init(){this.addCard(),this.deleteCard(),this.items=this.container.querySelectorAll(".items")}addCard(){this.container.querySelectorAll(".add_item").forEach((e=>{e.addEventListener("click",(t=>{const r=document.createElement("div");r.classList.add("create_item"),r.innerHTML='<textarea class="textarea" placeholder="Enter a title for this card..."></textarea>\n            <button class="btn">Add Card</button>\n            <button class="close">X</button>',t.target.replaceWith(r),r.addEventListener("click",(t=>{if(t.target.classList.contains("close")&&r.replaceWith(e),t.target.classList.contains("btn")&&""!==r.querySelector(".textarea").value){const n=document.createElement("li");n.classList.add("item"),n.insertAdjacentHTML("beforeend",`<span>${r.querySelector(".textarea").value}</span><button class="close-item">X</button>`),t.target.closest(".block").querySelector("ul").append(n),r.replaceWith(e)}}))}))}))}deleteCard(){[...document.querySelectorAll(".items")].forEach((e=>{e.addEventListener("click",(e=>{e.target.classList.contains("close-item")&&e.target.closest(".item").remove()}))}))}createStorage(){return this.items.forEach((e=>{e.querySelectorAll("li span").forEach(((t,r)=>{const n=e.getAttribute("data");this.storageOb[n][r]=t.textContent}))})),this.storageOb}},o=document.querySelector(".container");n.init(),(new class{constructor(){this.draggedEl=null,this.ghostEl=null,this.elem=null,this.container=null,this.empty=null}init(){this.container=document.querySelector(".container"),this.container.addEventListener("mousedown",this.down),this.container.addEventListener("mousemove",this.move),this.container.addEventListener("mouseleave",this.leave),this.container.addEventListener("mouseup",this.up)}down(e){e.target.classList.contains("item")&&(e.preventDefault(),this.draggedEl=e.target.closest(".item"),this.ghostEl=this.draggedEl.cloneNode(!0),this.ghostEl.style.width=`${this.draggedEl.offsetWidth}px`,this.ghostEl.classList.add("dragged"),document.querySelector(".container").appendChild(this.ghostEl),this.ghostEl.style.left=e.pageX-this.ghostEl.offsetWidth/2+"px",this.ghostEl.style.top=e.pageY-this.ghostEl.offsetHeight/2+"px",this.draggedEl.style.opacity=0,this.empty=document.createElement("li"),this.empty.classList.add("empty"),this.empty.style.height=`${this.draggedEl.offsetHeight}px`)}move(e){if(e.preventDefault(),this.draggedEl&&(this.ghostEl.classList.add("hidden"),this.elem=document.elementFromPoint(e.clientX,e.clientY),this.ghostEl.classList.remove("hidden"),this.ghostEl.style.left=e.pageX-this.ghostEl.offsetWidth/2+"px",this.ghostEl.style.top=e.pageY-this.ghostEl.offsetHeight/2+"px",this.elem.closest(".block"))){const e=this.elem.closest(".block").querySelector("ul");e.hasChildNodes()?this.elem.closest(".add_item")?e.append(this.empty):this.elem.closest("h3")?e.prepend(this.empty):this.elem.closest(".item")&&e.insertBefore(this.empty,this.elem.closest(".item")):e.append(this.empty)}}up(e){if(e.preventDefault(),!this.draggedEl)return;if(void 0===this.elem)return this.ghostEl.classList.remove("dragged"),this.draggedEl.style.opacity=100,this.ghostEl.remove(),this.ghostEl=null,void(this.draggedEl=null);if(!this.elem.closest(".block"))return document.querySelector(".container").removeChild(this.ghostEl),this.draggedEl.style.opacity=100,this.ghostEl=null,void(this.draggedEl=null);const t=this.elem.closest(".block").querySelector("ul");this.elem.closest("h3")?t.prepend(this.ghostEl):this.elem.closest("add_item")?t.append(this.ghostEl):t.insertBefore(this.ghostEl,this.elem.closest("li")),document.querySelector(".empty")&&document.querySelector(".empty").remove(),this.ghostEl.classList.remove("dragged"),this.ghostEl.style="100%",this.draggedEl.remove(),this.ghostEl=null,this.draggedEl=null}leave(e){e.preventDefault(),this.draggedEl&&(document.querySelector(".container").removeChild(this.ghostEl),document.querySelector(".empty").remove(),this.draggedEl.style.opacity=100,this.ghostEl=null,this.draggedEl=null)}}).init(),window.addEventListener("beforeunload",(()=>{const e=n.createStorage();localStorage.setItem("formData",JSON.stringify(e))})),document.addEventListener("DOMContentLoaded",(()=>{const e=localStorage.getItem("formData");let t;try{t=JSON.parse(e)}catch(e){return e}t&&Object.keys(t).forEach((e=>{t[e].forEach((t=>{const r=document.createElement("li");r.classList.add("item"),r.insertAdjacentHTML("beforeend",`<span>${t}</span><button class="close-item">X</button>`),o.querySelector(`[data="${e}"]`).insertAdjacentElement("beforeend",r)}))}))}))},140:(e,t,r)=>{var n=r(918),o=Object.create(null),i="undefined"==typeof document,s=Array.prototype.forEach;function a(){}function c(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function d(){var e=document.querySelectorAll("link");s.call(e,(function(e){!0!==e.visited&&c(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,u,h=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return s.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(c(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return r.apply(e,t)}),50)}}},918:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},588:(e,t,r)=>{var n=r(140)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},n={};function o(e){var t=n[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var i=n[e]={id:e,exports:{}};try{var s={id:e,module:i,factory:r[e],require:o};o.i.forEach((function(e){e(s)})),i=s.module,s.factory.call(i.exports,i,i.exports,s.require)}catch(e){throw i.error=e,e}return i.exports}o.m=r,o.c=n,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.miniCssF=e=>{},o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"ecd7f34617e9c97ce757",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="dnd:",o.l=(r,n,i,s)=>{if(e[r])e[r].push(n);else{var a,c;if(void 0!==i)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+i){a=u;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",t+i),a.src=r),e[r]=[n];var h=(t,n)=>{a.onerror=a.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),c&&document.head.appendChild(a)}},(()=>{var e,t,r,n={},i=o.c,s=[],a=[],c="idle",d=0,l=[];function u(e){c=e;for(var t=[],r=0;r<a.length;r++)t[r]=a[r].call(null,e);return Promise.all(t).then((function(){}))}function h(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return u("check").then(o.hmrM).then((function(r){return r?u("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return n}))},0===d?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(g()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+c+")")})):m(e)}function m(e){e=e||{},g();var n=t.map((function(t){return t(e)}));t=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var s,a=u("apply"),c=function(e){s||(s=e)},d=[];return n.forEach((function(e){if(e.apply){var t=e.apply(c);if(t)for(var r=0;r<t.length;r++)d.push(t[r])}})),Promise.all([i,a]).then((function(){return s?u("fail").then((function(){throw s})):r?m(e).then((function(e){return d.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return d}))}))}function g(){if(r)return t||(t=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(r){o.hmrI[e](r,t)}))})),r=void 0,!0}o.hmrD=n,o.i.push((function(l){var m,g,v,y,E=l.module,b=function(t,r){var n=i[r];if(!n)return t;var o=function(o){if(n.hot.active){if(i[o]){var a=i[o].parents;-1===a.indexOf(r)&&a.push(r)}else s=[r],e=o;-1===n.children.indexOf(o)&&n.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),s=[];return t(o)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(o,l,a(l));return o.e=function(e,r){return function(e){switch(c){case"ready":u("prepare");case"prepare":return d++,e.then(h,h),e;default:return e}}(t.e(e,r))},o}(l.require,l.id);E.hot=(m=l.id,g=E,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==m,_requireSelf:function(){s=g.parents.slice(),e=v?void 0:m,o(m)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":t=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return c;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:n[m]},e=void 0,y),E.parents=s,E.children=[],s=[],l.require=b})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],t=[],r=r=>({dispose:()=>{for(var t=0;t<e.length;t++){var r=e[t];r.parentNode&&r.parentNode.removeChild(r)}e.length=0},apply:()=>{for(var e=0;e<t.length;e++)t[e].rel="stylesheet";t.length=0}});o.hmrC.miniCss=(n,i,s,a,c,d)=>{c.push(r),n.forEach((r=>{var n=o.miniCssF(r),i=o.p+n,s=((e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(s=r[n]).getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(o===e||o===t))return s}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var s;if((o=(s=i[n]).getAttribute("data-href"))===e||o===t)return s}})(n,i);s&&a.push(new Promise(((n,o)=>{var a=((e,t,r,n,o)=>{var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=r=>{if(i.onerror=i.onload=null,"load"===r.type)n();else{var s=r&&r.type,a=r&&r.target&&r.target.href||t,c=new Error("Loading CSS chunk "+e+" failed.\n("+s+": "+a+")");c.name="ChunkLoadError",c.code="CSS_CHUNK_LOAD_FAILED",c.type=s,c.request=a,i.parentNode&&i.parentNode.removeChild(i),o(c)}},i.href=t,r?r.parentNode.insertBefore(i,r.nextSibling):document.head.appendChild(i),i})(r,i,s,(()=>{a.as="style",a.rel="preload",n()}),o);e.push(s),t.push(a)})))}))}}})(),(()=>{var e,t,r,n,i,s=o.hmrS_jsonp=o.hmrS_jsonp||{792:0},a={};function c(t,r){return e=r,new Promise(((e,r)=>{a[t]=e;var n=o.p+o.hu(t),i=new Error;o.l(n,(e=>{if(a[t]){a[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+t+" failed.\n("+n+": "+o+")",i.name="ChunkLoadError",i.type=n,i.request=o,r(i)}}))}))}function d(e){function a(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),s=i.id,a=i.chain,d=o.c[s];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:s};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:s};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],h=o.c[u];if(h){if(h.hot._declinedDependencies[s])return{type:"declined",chain:a.concat([u]),moduleId:s,parentId:u};-1===t.indexOf(u)&&(h.hot._acceptedDependencies[s]?(r[u]||(r[u]=[]),c(r[u],[s])):(delete r[u],t.push(u),n.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}o.f&&delete o.f.jsonpHmr,t=void 0;var d={},l=[],u={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(o.o(r,p)){var f,m=r[p],g=!1,v=!1,y=!1,E="";switch((f=m?a(p):{type:"disposed",moduleId:p}).chain&&(E="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+f.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(f),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(g)return{error:g};if(v)for(p in u[p]=m,c(l,f.outdatedModules),f.outdatedDependencies)o.o(f.outdatedDependencies,p)&&(d[p]||(d[p]=[]),c(d[p],f.outdatedDependencies[p]));y&&(c(l,[f.moduleId]),u[p]=h)}r=void 0;for(var b,w=[],S=0;S<l.length;S++){var _=l[S],x=o.c[_];x&&(x.hot._selfAccepted||x.hot._main)&&u[_]!==h&&!x.hot._selfInvalidated&&w.push({module:_,require:x.hot._requireSelf,errorHandler:x.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete s[e]})),n=void 0;for(var t,r=l.slice();r.length>0;){var i=r.pop(),a=o.c[i];if(a){var c={},u=a.hot._disposeHandlers;for(S=0;S<u.length;S++)u[S].call(null,c);for(o.hmrD[i]=c,a.hot.active=!1,delete o.c[i],delete d[i],S=0;S<a.children.length;S++){var h=o.c[a.children[S]];h&&(e=h.parents.indexOf(i))>=0&&h.parents.splice(e,1)}}}for(var p in d)if(o.o(d,p)&&(a=o.c[p]))for(b=d[p],S=0;S<b.length;S++)t=b[S],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(t){for(var r in u)o.o(u,r)&&(o.m[r]=u[r]);for(var n=0;n<i.length;n++)i[n](o);for(var s in d)if(o.o(d,s)){var a=o.c[s];if(a){b=d[s];for(var c=[],h=[],p=[],f=0;f<b.length;f++){var m=b[f],g=a.hot._acceptedDependencies[m],v=a.hot._acceptedErrorHandlers[m];if(g){if(-1!==c.indexOf(g))continue;c.push(g),h.push(v),p.push(m)}}for(var y=0;y<c.length;y++)try{c[y].call(null,b)}catch(r){if("function"==typeof h[y])try{h[y](r,{moduleId:s,dependencyId:p[y]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:s,dependencyId:p[y],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:s,dependencyId:p[y],error:r}),e.ignoreErrored||t(r)}}}for(var E=0;E<w.length;E++){var S=w[E],_=S.module;try{S.require(_)}catch(r){if("function"==typeof S.errorHandler)try{S.errorHandler(r,{moduleId:_,module:o.c[_]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:_,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:_,error:r}),e.ignoreErrored||t(r)}}return l}}}self.webpackHotUpdatednd=(t,n,s)=>{for(var c in n)o.o(n,c)&&(r[c]=n[c],e&&e.push(c));s&&i.push(s),a[t]&&(a[t](),a[t]=void 0)},o.hmrI.jsonp=function(e,t){r||(r={},i=[],n=[],t.push(d)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(e,a,l,u,h,p){h.push(d),t={},n=a,r=l.reduce((function(e,t){return e[t]=!1,e}),{}),i=[],e.forEach((function(e){o.o(s,e)&&void 0!==s[e]?(u.push(c(e,p)),t[e]=!0):t[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){t&&o.o(t,e)&&!t[e]&&(r.push(c(e)),t[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(325)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,